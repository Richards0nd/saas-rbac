generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TokenType {
  PASSWORD_RECOVER
}

enum AccountProvider {
  GOOGLE
  GITHUB
  DISCORD
}

enum Role {
  ADMIN
  MEMBER
  BILLING
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tokens            Token[]
  accounts          Account[]
  invites           Invite[]
  memberOn          Member[]
  ownsOrganizations Organization[]
  ownsProjects      Project[]

  @@map("users")
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  userId    String

  @@map("tokens")
}

model Account {
  id         String          @id @default(uuid())
  user       User            @relation(fields: [userId], references: [id])
  provider   AccountProvider
  providerId String          @unique
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  userId     String

  @@unique([provider, userId])
  @@map("accounts")
}

model Invite {
  id           String       @id @default(uuid())
  email        String       @unique
  token        String       @unique
  role         Role
  author       User?        @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId         String?
  organizationId String

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id                        String  @id @default(uuid())
  name                      String
  slug                      String  @unique
  domain                    String? @unique
  shouldAttachUsersByDomain Boolean @default(false)
  avatarUrl                 String?

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invites  Invite[]
  members  Member[]
  projects Project[]

  @@map("organizations")
}

model Project {
  id          String  @id @default(uuid())
  name        String
  description String
  slug        String  @unique
  avatarUrl   String?

  organization Organization @relation(fields: [organizationId], references: [id])

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String

  @@map("projects")
}
